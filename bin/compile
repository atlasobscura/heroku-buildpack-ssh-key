#!/bin/bash

set -e

indent() {
  sed -u 's/^/       /'
}

echo "-----> Install heroku-buildpack-ssh-key"

BUILD_DIR=$1
VENDOR_DIR="$BUILD_DIR/vendor"
ENV_DIR=$3

# adapted from SectorLabs/heroku-buildpack-git-submodule
BUILDPACK_SSH_KEY=$(<"$ENV_DIR/BUILDPACK_SSH_KEY")

if [[ -z $BUILDPACK_SSH_KEY ]]; then
    echo "Did you forget to set BUILDPACK_SSH_KEY?" | indent
    exit 1
fi

function install_ssh_key() {
  local SSH_DIR=$1

  mkdir -p ${SSH_DIR}
  chmod 700 ${SSH_DIR}

  # ignore/hide ssh warnings
  echo "Host *" >> ${SSH_DIR}/config
  echo "   StrictHostKeyChecking no" >> ${SSH_DIR}/config
  echo "   UserKnownHostsFile /dev/null" >> ${SSH_DIR}/config
  echo "   LogLevel ERROR" >> ${SSH_DIR}/config
  echo "-----> Installed SSH key from BUILDPACK_SSH_KEY"

  # install the ssh key
  ssh-keyscan -H github.com >> ${SSH_DIR}/known_hosts 2> /dev/null
  cat "$ENV_DIR/BUILDPACK_SSH_KEY" > ${SSH_DIR}/id_rsa
  echo >> ${SSH_DIR}/id_rsa
  chmod 600 ${SSH_DIR}/id_rsa
}

# expose the BUILDPACK_SSH_KEY information for other buildpacks at compile-time
install_ssh_key ~/.ssh

# if we're in the new build system (heroku labs:enable build-in-app-dir),
# the value of $HOME won't be /app (it will be a random /tmp directory).
# This means we'll need to run the compile steps again
# and place SSH information in the BUILD_DIR directory, so that it becomes
# available at **runtime** in the new build system when $HOME is /app again.
if [ ${BUILD_DIR} != ${HOME} ]; then
  install_ssh_key ${BUILD_DIR}/.ssh
fi
